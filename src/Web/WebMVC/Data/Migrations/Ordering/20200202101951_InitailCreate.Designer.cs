// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ordering.Infrastructure;

namespace WebMVC.Data.Migrations.Ordering
{
    [DbContext(typeof(OrderingContext))]
    [Migration("20200202101951_InitailCreate")]
    partial class InitailCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.balancewithdrawalseq", "'balancewithdrawalseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ordering.orderseq", "'orderseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:ordering.shopapiseq", "'shopapiseq', 'ordering', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ordering.Domain.Model.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("CommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaired")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePaymentRecieved")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpirationTimeInSeconds")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTestOrder")
                        .HasColumnType("bit");

                    b.Property<string>("OrderStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_orderPaymentChannelId")
                        .HasColumnName("OrderPaymentChannel")
                        .HasColumnType("int");

                    b.Property<int>("_orderPaymentSchemeId")
                        .HasColumnName("OrderPaymentScheme")
                        .HasColumnType("int");

                    b.Property<int>("_orderStatusId")
                        .HasColumnName("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("_orderTypeId")
                        .HasColumnName("OrderType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_orderPaymentChannelId");

                    b.HasIndex("_orderPaymentSchemeId");

                    b.HasIndex("_orderStatusId");

                    b.HasIndex("_orderTypeId");

                    b.ToTable("orders","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.Orders.OrderPaymentChannel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("orderPaymentChannel","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.Orders.OrderPaymentScheme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("orderPaymentScheme","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("orderstatus","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.Orders.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ordertype","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.ShopApis.IpWhitelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "balancewithdrawalseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("ShopApiId")
                        .HasColumnType("int");

                    b.Property<string>("_address")
                        .IsRequired()
                        .HasColumnName("Address")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopApiId");

                    b.ToTable("ipWhitelists","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.ShopApis.ShopApi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "shopapiseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "ordering")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("shopApis","ordering");
                });

            modelBuilder.Entity("Ordering.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests","ordering");
                });

            modelBuilder.Entity("Ordering.Domain.Model.Orders.Order", b =>
                {
                    b.HasOne("Ordering.Domain.Model.Orders.OrderPaymentChannel", "OrderPaymentChannel")
                        .WithMany()
                        .HasForeignKey("_orderPaymentChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordering.Domain.Model.Orders.OrderPaymentScheme", "OrderPaymentScheme")
                        .WithMany()
                        .HasForeignKey("_orderPaymentSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordering.Domain.Model.Orders.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("_orderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ordering.Domain.Model.Orders.OrderType", "OrderType")
                        .WithMany()
                        .HasForeignKey("_orderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ordering.Domain.Model.Orders.AlipayPagePreference", "AlipayPagePreference", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<bool>("IsAccountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsAmountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByClickEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByPickingPhotoEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByScanEnabled")
                                .HasColumnType("bit");

                            b1.Property<int>("SecondsBeforePayment")
                                .HasColumnType("int");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Ordering.Domain.Model.Orders.PayeeInfo", "PayeeInfo", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("FourthPartyId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FourthPartyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FourthPartyOrderNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FourthPartyOrderPaymentUrl")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("ToppestTradingRate")
                                .IsRequired()
                                .HasColumnType("decimal(4,3)");

                            b1.Property<string>("TraderId")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Ordering.Domain.Model.Orders.PayerInfo", "PayerInfo", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("Device")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Location")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("Ordering.Domain.Model.Orders.ShopInfo", "ShopInfo", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<decimal>("RateRebateFinal")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("RateRebateShop")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<string>("ShopId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShopOkReturnUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShopOrderId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShopReturnUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });
                });

            modelBuilder.Entity("Ordering.Domain.Model.ShopApis.IpWhitelist", b =>
                {
                    b.HasOne("Ordering.Domain.Model.ShopApis.ShopApi", null)
                        .WithMany("IpWhitelists")
                        .HasForeignKey("ShopApiId");
                });
#pragma warning restore 612, 618
        }
    }
}
