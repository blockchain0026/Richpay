// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pairing.Infrastructure;

namespace WebMVC.Data.Migrations.Pairing
{
    [DbContext(typeof(PairingContext))]
    [Migration("20200224113737_RemoveConcurrencyTokenForPairingStatusOnQrCode")]
    partial class RemoveConcurrencyTokenForPairingStatusOnQrCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.orderamountoptionseq", "'orderamountoptionseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.qrcodeorderseq", "'qrcodeorderseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:pairing.clouddeviceseq", "'clouddeviceseq', 'pairing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:pairing.fourthpartygatewayseq", "'fourthpartygatewayseq', 'pairing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:pairing.qrcodeseq", "'qrcodeseq', 'pairing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:pairing.shopgatewayseq", "'shopgatewayseq', 'pairing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:pairing.shopsettingsseq", "'shopsettingsseq', 'pairing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pairing.Domain.Model.CloudDevices.CloudDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "clouddeviceseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "pairing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CloudDeviceStatusId")
                        .HasColumnName("CloudDeviceStatusId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_cloudDeviceStatusId")
                        .HasColumnName("CloudDeviceStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CloudDeviceStatusId");

                    b.ToTable("cloudDevices","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.CloudDevices.CloudDeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("cloudDeviceStatus","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.FourthPartyGateways.FourthPartyGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "fourthpartygatewayseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "pairing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpenFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OpenTo")
                        .HasColumnType("time");

                    b.Property<int?>("PaymentChannelId")
                        .HasColumnName("PaymentChannelId1")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentSchemeId")
                        .HasColumnName("PaymentSchemeId1")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_paymentChannelId")
                        .HasColumnName("PaymentChannelId")
                        .HasColumnType("int");

                    b.Property<int>("_paymentSchemeId")
                        .HasColumnName("PaymentSchemeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentChannelId");

                    b.HasIndex("PaymentSchemeId");

                    b.HasIndex("_paymentChannelId");

                    b.HasIndex("_paymentSchemeId");

                    b.ToTable("fourthPartyGateways","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.PairingStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("pairingStatus","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.PaymentChannel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("paymentChannel","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.PaymentScheme", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("paymentScheme","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.QrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "qrcodeseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "pairing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("CloudDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("CodeStatusDiscription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DailyAmountLimit")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastTraded")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<decimal>("MinCommissionRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<decimal>("OrderAmountLowerLimit")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("OrderAmountUpperLimit")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("PairingStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuotaLeftToday")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("SpecifiedShopId")
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_pairingStatusId")
                        .HasColumnName("PairingStatusId")
                        .HasColumnType("int");

                    b.Property<int>("_paymentChannelId")
                        .HasColumnName("PaymentChannelId")
                        .HasColumnType("int");

                    b.Property<int>("_paymentSchemeId")
                        .HasColumnName("PaymentSchemeId")
                        .HasColumnType("int");

                    b.Property<int>("_qrCodeStatusId")
                        .HasColumnName("QrCodeStatusId")
                        .HasColumnType("int");

                    b.Property<int>("_qrCodeTypeId")
                        .HasColumnName("QrCodeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CloudDeviceId");

                    b.HasIndex("_paymentChannelId");

                    b.HasIndex("_paymentSchemeId");

                    b.HasIndex("_qrCodeStatusId");

                    b.HasIndex("_qrCodeTypeId");

                    b.HasIndex("_pairingStatusId", "_paymentChannelId", "_paymentSchemeId", "DateLastTraded", "MinCommissionRate", "AvailableBalance", "SpecifiedShopId", "QuotaLeftToday")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("qrCodes","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.QrCodeOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "qrcodeorderseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("OrderTrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("_amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("_dateCreated")
                        .HasColumnName("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("_dateFinished")
                        .HasColumnName("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<bool>("_isFailed")
                        .HasColumnName("IsFailed")
                        .HasColumnType("bit");

                    b.Property<bool>("_isSuccess")
                        .HasColumnName("IsSuccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("qrCodeOrders","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.QrCodeStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("qrCodeStatus","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.QrCodeType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("qrCodeType","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopGateways.ShopGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "shopgatewayseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "pairing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FourthPartyGatewayId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentChannelId")
                        .HasColumnName("PaymentChannelId1")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentSchemeId")
                        .HasColumnName("PaymentSchemeId1")
                        .HasColumnType("int");

                    b.Property<int?>("ShopGatewayTypeId")
                        .HasColumnName("ShopGatewayTypeId1")
                        .HasColumnType("int");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_paymentChannelId")
                        .HasColumnName("PaymentChannelId")
                        .HasColumnType("int");

                    b.Property<int>("_paymentSchemeId")
                        .HasColumnName("PaymentSchemeId")
                        .HasColumnType("int");

                    b.Property<int>("_shopGatewayTypeId")
                        .HasColumnName("ShopGatewayTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FourthPartyGatewayId");

                    b.HasIndex("PaymentChannelId");

                    b.HasIndex("PaymentSchemeId");

                    b.HasIndex("ShopGatewayTypeId");

                    b.HasIndex("_paymentChannelId");

                    b.HasIndex("_paymentSchemeId");

                    b.HasIndex("_shopGatewayTypeId");

                    b.ToTable("shopGateways","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopGateways.ShopGatewayType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("shopGatewayType","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopSettingsDomainModel.OrderAmountOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "orderamountoptionseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopSettingsId")
                        .HasColumnType("int");

                    b.Property<decimal>("_amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("_dateCreated")
                        .HasColumnName("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ShopSettingsId");

                    b.ToTable("orderAmountOptions","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopSettingsDomainModel.ShopSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "shopsettingsseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "pairing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("shopSettingss","pairing");
                });

            modelBuilder.Entity("Pairing.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests","pairing");
                });

            modelBuilder.Entity("Pairing.Domain.Model.CloudDevices.CloudDevice", b =>
                {
                    b.HasOne("Pairing.Domain.Model.CloudDevices.CloudDeviceStatus", "CloudDeviceStatus")
                        .WithMany()
                        .HasForeignKey("CloudDeviceStatusId");
                });

            modelBuilder.Entity("Pairing.Domain.Model.FourthPartyGateways.FourthPartyGateway", b =>
                {
                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentChannel", "PaymentChannel")
                        .WithMany()
                        .HasForeignKey("PaymentChannelId");

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentScheme", "PaymentScheme")
                        .WithMany()
                        .HasForeignKey("PaymentSchemeId");

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentChannel", null)
                        .WithMany()
                        .HasForeignKey("_paymentChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentScheme", null)
                        .WithMany()
                        .HasForeignKey("_paymentSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pairing.Domain.Model.QrCodes.QrCode", b =>
                {
                    b.HasOne("Pairing.Domain.Model.CloudDevices.CloudDevice", null)
                        .WithMany()
                        .HasForeignKey("CloudDeviceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pairing.Domain.Model.QrCodes.PairingStatus", "PairingStatus")
                        .WithMany()
                        .HasForeignKey("_pairingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentChannel", "PaymentChannel")
                        .WithMany()
                        .HasForeignKey("_paymentChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentScheme", "PaymentScheme")
                        .WithMany()
                        .HasForeignKey("_paymentSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.QrCodeStatus", "QrCodeStatus")
                        .WithMany()
                        .HasForeignKey("_qrCodeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.QrCodeType", "QrCodeType")
                        .WithMany()
                        .HasForeignKey("_qrCodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.BankData", "BankData", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankMark")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CardNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.BarcodeDataForAuto", "BarcodeDataForAuto", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<string>("CloudDeviceNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CloudDevicePassword")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CloudDeviceUsername")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.BarcodeDataForManual", "BarcodeDataForManual", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Amount")
                                .HasColumnType("decimal(18,0)");

                            b1.Property<string>("QrCodeUrl")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.MerchantData", "MerchantData", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<string>("AlipayPublicKey")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AppId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("MerchantId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PrivateKey")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("WechatApiCertificate")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.PairingData", "PairingData", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<int>("CurrentConsecutiveFailures")
                                .HasColumnType("int");

                            b1.Property<int>("CurrentConsecutiveSuccess")
                                .HasColumnType("int");

                            b1.Property<int>("HighestConsecutiveFailures")
                                .HasColumnType("int");

                            b1.Property<int>("HighestConsecutiveSuccess")
                                .HasColumnType("int");

                            b1.Property<decimal>("SuccessRate")
                                .HasColumnType("decimal(3,2)");

                            b1.Property<int>("TotalFailures")
                                .HasColumnType("int");

                            b1.Property<int>("TotalSuccess")
                                .HasColumnType("int");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.QrCodeSettings", "QrCodeSettings", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<bool>("AutoPairingByBusinessHours")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingByCurrentConsecutiveFailures")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingByQuotaLeft")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingBySuccessRate")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairngByAvailableBalance")
                                .HasColumnType("bit");

                            b1.Property<decimal>("AvailableBalanceThreshold")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("CurrentConsecutiveFailuresThreshold")
                                .HasColumnType("int");

                            b1.Property<decimal>("QuotaLeftThreshold")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("SuccessRateMinOrders")
                                .HasColumnType("int");

                            b1.Property<decimal>("SuccessRateThreshold")
                                .HasColumnType("decimal(3,2)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.QrCodes.TransactionData", "TransactionData", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });

                    b.OwnsOne("Pairing.Domain.Model.Shared.Admin", "ApprovedBy", b1 =>
                        {
                            b1.Property<int>("QrCodeId")
                                .HasColumnType("int");

                            b1.Property<string>("AdminId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("QrCodeId");

                            b1.ToTable("qrCodes");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeId");
                        });
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopGateways.ShopGateway", b =>
                {
                    b.HasOne("Pairing.Domain.Model.FourthPartyGateways.FourthPartyGateway", null)
                        .WithMany()
                        .HasForeignKey("FourthPartyGatewayId");

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentChannel", "PaymentChannel")
                        .WithMany()
                        .HasForeignKey("PaymentChannelId");

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentScheme", "PaymentScheme")
                        .WithMany()
                        .HasForeignKey("PaymentSchemeId");

                    b.HasOne("Pairing.Domain.Model.ShopGateways.ShopGatewayType", "ShopGatewayType")
                        .WithMany()
                        .HasForeignKey("ShopGatewayTypeId");

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentChannel", null)
                        .WithMany()
                        .HasForeignKey("_paymentChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.QrCodes.PaymentScheme", null)
                        .WithMany()
                        .HasForeignKey("_paymentSchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pairing.Domain.Model.ShopGateways.ShopGatewayType", null)
                        .WithMany()
                        .HasForeignKey("_shopGatewayTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Pairing.Domain.Model.ShopSettingsDomainModel.AlipayPreference", "AlipayPreference", b1 =>
                        {
                            b1.Property<int>("ShopGatewayId")
                                .HasColumnType("int");

                            b1.Property<bool>("IsAccountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsAmountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByClickEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByPickingPhotoEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByScanEnabled")
                                .HasColumnType("bit");

                            b1.Property<int>("SecondsBeforePayment")
                                .HasColumnType("int");

                            b1.HasKey("ShopGatewayId");

                            b1.ToTable("shopGateways");

                            b1.WithOwner()
                                .HasForeignKey("ShopGatewayId");
                        });
                });

            modelBuilder.Entity("Pairing.Domain.Model.ShopSettingsDomainModel.OrderAmountOption", b =>
                {
                    b.HasOne("Pairing.Domain.Model.ShopSettingsDomainModel.ShopSettings", null)
                        .WithMany("OrderAmountOptions")
                        .HasForeignKey("ShopSettingsId");
                });
#pragma warning restore 612, 618
        }
    }
}
