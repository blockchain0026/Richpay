// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebMVC.Data;

namespace WebMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200312112957_DateTimeObjectForDepositAndWithdrawalEntry")]
    partial class DateTimeObjectForDepositAndWithdrawalEntry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.bankbookrecordseq", "'bankbookrecordseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.runningaccountrecordseq", "'runningaccountrecordseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Bankbook.BankbookRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "bankbookrecordseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("AmountChanged")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<string>("DateOccurred")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bankbookRecords");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Deposits.DepositEntry", b =>
                {
                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CommissionRateInThousandth")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedByAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifiedByAdminName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepositId");

                    b.HasIndex("DateCreated", "UserId");

                    b.ToTable("depositEntrys");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Orders.OrderEntry", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatePaired")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("DatePaymentRecieved")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Device")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("FourthPartyId")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("FourthPartyName")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTestOrder")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OrderPaymentChannel")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OrderPaymentScheme")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OrderStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("PlatformCommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("QrCodeId")
                        .HasColumnType("int");

                    b.Property<decimal>("RateRebateFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateRebateShop")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ShopCommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ShopFullName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<string>("ShopOrderId")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("ShopUserCommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ShopUserName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("ToppestTradingRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("TraderCommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("TraderFullName")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("TraderId")
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<string>("TraderUserName")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<decimal?>("TradingUserCommissionRealized")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("OrderId");

                    b.HasIndex("DateCreated", "TraderId", "ShopId");

                    b.ToTable("orderEntrys");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.QrCodes.QrCodeEntry", b =>
                {
                    b.Property<int>("QrCodeId")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedByAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedByAdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("CloudDeviceId")
                        .HasColumnType("int");

                    b.Property<string>("CodeStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DailyAmountLimit")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastTraded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<int>("MinCommissionRateInThousandth")
                        .HasColumnType("int");

                    b.Property<int>("OrderAmountLowerLimit")
                        .HasColumnType("int");

                    b.Property<int>("OrderAmountUpperLimit")
                        .HasColumnType("int");

                    b.Property<string>("PairingStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PairingStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentChannel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentScheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCodeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCodeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuotaLeftToday")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("SpecifiedShopFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifiedShopId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifiedShopUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QrCodeId");

                    b.ToTable("qrCodeEntrys");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.RunningAccounts.RunningAccountRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "runningaccountrecordseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DistributedAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("DistributionId")
                        .HasColumnType("int");

                    b.Property<string>("DownlineFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownlineUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownlineUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderTrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraderFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraderUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "DateCreated");

                    b.ToTable("runningAccountRecords");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.RunningAccounts.TempRunningAccountRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OrderTrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tempRunningAccountRecords");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.ShopAgents.ShopAgent", b =>
                {
                    b.Property<string>("ShopAgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastLoggedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGrantRight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopAgentId");

                    b.ToTable("shopAgents","application");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.ShopGateways.ShopGatewayEntry", b =>
                {
                    b.Property<int>("ShopGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FourthPartyGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentChannel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentScheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopGatewayType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopGatewayId");

                    b.ToTable("shopGatewayEntrys");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Shops.Shop", b =>
                {
                    b.Property<string>("ShopId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastLoggedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastTrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.ToTable("shops","application");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.TraderAgents.TraderAgent", b =>
                {
                    b.Property<string>("TraderAgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastLoggedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGrantRight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraderAgentId");

                    b.ToTable("traderAgents","application");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Traders.Trader", b =>
                {
                    b.Property<string>("TraderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastLoggedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UplineUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraderId");

                    b.ToTable("traders","application");
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Withdrawals.WithdrawalEntry", b =>
                {
                    b.Property<int>("WithdrawalId")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ApprovedByAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApprovedByAdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<string>("CancellationApprovedByAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CancellationApprovedByAdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CommissionRateInThousandth")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(900)")
                        .IsUnicode(false);

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawalStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WithdrawalId");

                    b.HasIndex("DateCreated", "UserId");

                    b.ToTable("withdrawalEntrys");
                });

            modelBuilder.Entity("WebMVC.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("BaseRoleType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateLastLoggedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<string>("LastLoginIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("QQ")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UplineId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Wechat")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebMVC.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebMVC.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebMVC.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebMVC.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Deposits.DepositEntry", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Deposits.DepositBankAccount", "DepositBankAccount", b1 =>
                        {
                            b1.Property<int>("DepositEntryDepositId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AccountNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("BankAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("BankName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DateCreated")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DepositEntryDepositId");

                            b1.ToTable("depositEntrys");

                            b1.WithOwner()
                                .HasForeignKey("DepositEntryDepositId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.QrCodes.QrCodeEntry", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.QrCodes.PairingInfo", "PairingInfo", b1 =>
                        {
                            b1.Property<int>("QrCodeEntryQrCodeId")
                                .HasColumnType("int");

                            b1.Property<int>("CurrentConsecutiveFailures")
                                .HasColumnType("int");

                            b1.Property<int>("CurrentConsecutiveSuccess")
                                .HasColumnType("int");

                            b1.Property<int>("HighestConsecutiveFailures")
                                .HasColumnType("int");

                            b1.Property<int>("HighestConsecutiveSuccess")
                                .HasColumnType("int");

                            b1.Property<int>("SuccessRateInPercent")
                                .HasColumnType("int");

                            b1.Property<int>("TotalFailures")
                                .HasColumnType("int");

                            b1.Property<int>("TotalSuccess")
                                .HasColumnType("int");

                            b1.HasKey("QrCodeEntryQrCodeId");

                            b1.ToTable("qrCodeEntrys");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeEntryQrCodeId");
                        });

                    b.OwnsOne("WebMVC.Applications.Queries.QrCodes.QrCodeEntrySetting", "QrCodeEntrySetting", b1 =>
                        {
                            b1.Property<int>("QrCodeEntryQrCodeId")
                                .HasColumnType("int");

                            b1.Property<bool>("AutoPairingByBusinessHours")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingByCurrentConsecutiveFailures")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingByQuotaLeft")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairingBySuccessRate")
                                .HasColumnType("bit");

                            b1.Property<bool>("AutoPairngByAvailableBalance")
                                .HasColumnType("bit");

                            b1.Property<decimal>("AvailableBalanceThreshold")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("CurrentConsecutiveFailuresThreshold")
                                .HasColumnType("int");

                            b1.Property<decimal>("QuotaLeftThreshold")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("SuccessRateMinOrders")
                                .HasColumnType("int");

                            b1.Property<int>("SuccessRateThresholdInHundredth")
                                .HasColumnType("int");

                            b1.HasKey("QrCodeEntryQrCodeId");

                            b1.ToTable("qrCodeEntrys");

                            b1.WithOwner()
                                .HasForeignKey("QrCodeEntryQrCodeId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.ShopAgents.ShopAgent", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Balances.ShopUserBalance", "Balance", b1 =>
                        {
                            b1.Property<string>("ShopAgentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("AmountAvailable")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("AmountFrozen")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("WithdrawalCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("ShopAgentId");

                            b1.ToTable("shopAgents");

                            b1.WithOwner()
                                .HasForeignKey("ShopAgentId");

                            b1.OwnsOne("WebMVC.Applications.Queries.Balances.WithdrawalLimit", "WithdrawalLimit", b2 =>
                                {
                                    b2.Property<string>("ShopUserBalanceShopAgentId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<decimal>("DailyAmountLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<int>("DailyFrequencyLimit")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("EachAmountLowerLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<decimal>("EachAmountUpperLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.HasKey("ShopUserBalanceShopAgentId");

                                    b2.ToTable("shopAgents");

                                    b2.WithOwner()
                                        .HasForeignKey("ShopUserBalanceShopAgentId");
                                });
                        });

                    b.OwnsOne("WebMVC.Applications.Queries.Commission.RebateCommission", "RebateCommission", b1 =>
                        {
                            b1.Property<string>("ShopAgentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("RateRebateAlipayInThousandth")
                                .HasColumnType("int");

                            b1.Property<int>("RateRebateWechatInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("ShopAgentId");

                            b1.ToTable("shopAgents");

                            b1.WithOwner()
                                .HasForeignKey("ShopAgentId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.ShopGateways.ShopGatewayEntry", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.ShopGateways.AlipayPreferenceInfo", "AlipayPreferenceInfo", b1 =>
                        {
                            b1.Property<int>("ShopGatewayEntryShopGatewayId")
                                .HasColumnType("int");

                            b1.Property<bool>("IsAccountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsAmountUnchangeable")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByClickEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByPickingPhotoEnabled")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsH5RedirectByScanEnabled")
                                .HasColumnType("bit");

                            b1.Property<int>("SecondsBeforePayment")
                                .HasColumnType("int");

                            b1.HasKey("ShopGatewayEntryShopGatewayId");

                            b1.ToTable("shopGatewayEntrys");

                            b1.WithOwner()
                                .HasForeignKey("ShopGatewayEntryShopGatewayId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Shops.Shop", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Balances.ShopUserBalance", "Balance", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("AmountAvailable")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("AmountFrozen")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("WithdrawalCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("ShopId");

                            b1.ToTable("shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");

                            b1.OwnsOne("WebMVC.Applications.Queries.Balances.WithdrawalLimit", "WithdrawalLimit", b2 =>
                                {
                                    b2.Property<string>("ShopUserBalanceShopId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<decimal>("DailyAmountLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<int>("DailyFrequencyLimit")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("EachAmountLowerLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<decimal>("EachAmountUpperLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.HasKey("ShopUserBalanceShopId");

                                    b2.ToTable("shops");

                                    b2.WithOwner()
                                        .HasForeignKey("ShopUserBalanceShopId");
                                });
                        });

                    b.OwnsOne("WebMVC.Applications.Queries.Commission.RebateCommission", "RebateCommission", b1 =>
                        {
                            b1.Property<string>("ShopId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("RateRebateAlipayInThousandth")
                                .HasColumnType("int");

                            b1.Property<int>("RateRebateWechatInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("ShopId");

                            b1.ToTable("shops");

                            b1.WithOwner()
                                .HasForeignKey("ShopId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.TraderAgents.TraderAgent", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Balances.Balance", "Balance", b1 =>
                        {
                            b1.Property<string>("TraderAgentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("AmountAvailable")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("AmountFrozen")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("DepositCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("WithdrawalCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("TraderAgentId");

                            b1.ToTable("traderAgents");

                            b1.WithOwner()
                                .HasForeignKey("TraderAgentId");

                            b1.OwnsOne("WebMVC.Applications.Queries.Balances.WithdrawalLimit", "WithdrawalLimit", b2 =>
                                {
                                    b2.Property<string>("BalanceTraderAgentId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<decimal>("DailyAmountLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<int>("DailyFrequencyLimit")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("EachAmountLowerLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<decimal>("EachAmountUpperLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.HasKey("BalanceTraderAgentId");

                                    b2.ToTable("traderAgents");

                                    b2.WithOwner()
                                        .HasForeignKey("BalanceTraderAgentId");
                                });
                        });

                    b.OwnsOne("WebMVC.Applications.Queries.Commission.TradingCommission", "TradingCommission", b1 =>
                        {
                            b1.Property<string>("TraderAgentId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("RateAlipayInThousandth")
                                .HasColumnType("int");

                            b1.Property<int>("RateWechatInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("TraderAgentId");

                            b1.ToTable("traderAgents");

                            b1.WithOwner()
                                .HasForeignKey("TraderAgentId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Traders.Trader", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Balances.Balance", "Balance", b1 =>
                        {
                            b1.Property<string>("TraderId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<decimal>("AmountAvailable")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("AmountFrozen")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<int>("DepositCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("WithdrawalCommissionRateInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("TraderId");

                            b1.ToTable("traders");

                            b1.WithOwner()
                                .HasForeignKey("TraderId");

                            b1.OwnsOne("WebMVC.Applications.Queries.Balances.WithdrawalLimit", "WithdrawalLimit", b2 =>
                                {
                                    b2.Property<string>("BalanceTraderId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<decimal>("DailyAmountLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<int>("DailyFrequencyLimit")
                                        .HasColumnType("int");

                                    b2.Property<decimal>("EachAmountLowerLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.Property<decimal>("EachAmountUpperLimit")
                                        .HasColumnType("decimal(18,0)");

                                    b2.HasKey("BalanceTraderId");

                                    b2.ToTable("traders");

                                    b2.WithOwner()
                                        .HasForeignKey("BalanceTraderId");
                                });
                        });

                    b.OwnsOne("WebMVC.Applications.Queries.Commission.TradingCommission", "TradingCommission", b1 =>
                        {
                            b1.Property<string>("TraderId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("RateAlipayInThousandth")
                                .HasColumnType("int");

                            b1.Property<int>("RateWechatInThousandth")
                                .HasColumnType("int");

                            b1.HasKey("TraderId");

                            b1.ToTable("traders");

                            b1.WithOwner()
                                .HasForeignKey("TraderId");
                        });
                });

            modelBuilder.Entity("WebMVC.Applications.Queries.Withdrawals.WithdrawalEntry", b =>
                {
                    b.OwnsOne("WebMVC.Applications.Queries.Withdrawals.WithdrawalBankOption", "WithdrawalBankOption", b1 =>
                        {
                            b1.Property<int>("WithdrawalEntryWithdrawalId")
                                .HasColumnType("int");

                            b1.Property<string>("BankName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DateCreated")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("WithdrawalBankId")
                                .HasColumnType("int");

                            b1.HasKey("WithdrawalEntryWithdrawalId");

                            b1.ToTable("withdrawalEntrys");

                            b1.WithOwner()
                                .HasForeignKey("WithdrawalEntryWithdrawalId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
