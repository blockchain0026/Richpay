// <auto-generated />
using System;
using Distributing.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebMVC.Data.Migrations.Distributing
{
    [DbContext(typeof(DistributingContext))]
    [Migration("20200227130549_AddBalanceIdToCommission")]
    partial class AddBalanceIdToCommission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.balancewithdrawalseq", "'balancewithdrawalseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.processingorderseq", "'processingorderseq', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.balanceseq", "'balanceseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.chainseq", "'chainseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.commissionseq", "'commissionseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.depositaccountseq", "'depositaccountseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.depositseq", "'depositseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.distributionseq", "'distributionseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.frozenseq", "'frozenseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.transferseq", "'transferseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.withdrawalbankseq", "'withdrawalbankseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:distributing.withdrawalseq", "'withdrawalseq', 'distributing', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Distributing.Domain.Model.Balances.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "balanceseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("AmountAvailable")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("DepositCommissionRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnName("UserTypeId1")
                        .HasColumnType("int");

                    b.Property<decimal>("WithdrawalCommissionRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<int>("_userTypeId")
                        .HasColumnName("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.HasIndex("_userTypeId");

                    b.ToTable("balances","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Balances.BalanceWithdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "balancewithdrawalseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int?>("BalanceId")
                        .HasColumnType("int");

                    b.Property<int>("WithdrawalId")
                        .HasColumnType("int");

                    b.Property<decimal>("_amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("_dateWithdraw")
                        .HasColumnName("DateWithdraw")
                        .HasColumnType("datetime2");

                    b.Property<bool>("_isFailed")
                        .HasColumnName("IsFailed")
                        .HasColumnType("bit");

                    b.Property<bool>("_isSuccess")
                        .HasColumnName("IsSuccess")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("WithdrawalId");

                    b.ToTable("balanceWithdrawals","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Banks.DepositAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "depositaccountseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("depositAccounts","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Banks.WithdrawalBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "withdrawalbankseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("withdrawalBanks","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Chains.Chain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "chainseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.HasKey("Id");

                    b.ToTable("chains","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Commissions.Commission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "commissionseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<int>("ChainNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("RateAlipay")
                        .HasColumnType("decimal(4,3)");

                    b.Property<decimal>("RateRebateAlipay")
                        .HasColumnType("decimal(4,3)");

                    b.Property<decimal>("RateRebateWechat")
                        .HasColumnType("decimal(4,3)");

                    b.Property<decimal>("RateWechat")
                        .HasColumnType("decimal(4,3)");

                    b.Property<int?>("UplineCommissionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("_userTypeId")
                        .HasColumnName("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UplineCommissionId");

                    b.HasIndex("UserId");

                    b.HasIndex("_userTypeId");

                    b.ToTable("commissions","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Commissions.ProcessingOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "processingorderseq")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("_amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("_commissionAmount")
                        .HasColumnName("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("Id");

                    b.ToTable("processingOrders","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Commissions.UserType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("usertypes","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Deposits.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "depositseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BalanceId")
                        .HasColumnName("BalanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_depositStatusId")
                        .HasColumnName("DepositStatus")
                        .HasColumnType("int");

                    b.Property<int>("_depositTypeId")
                        .HasColumnName("DepositType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("_depositStatusId");

                    b.HasIndex("_depositTypeId");

                    b.ToTable("deposits","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Deposits.DepositStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("depositstatus","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Deposits.DepositType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("deposittype","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Distributions.Distribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "distributionseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<int>("CommissionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDistributed")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DistributedAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("_distributionTypeId")
                        .HasColumnName("DistributionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("UserId");

                    b.HasIndex("_distributionTypeId");

                    b.ToTable("distributions","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Distributions.DistributionType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("distributiontypes","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Frozens.Frozen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "frozenseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BalanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFroze")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUnfroze")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderTrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WithdrawalId")
                        .HasColumnType("int");

                    b.Property<int>("_frozenStatusId")
                        .HasColumnName("FrozenStatusId")
                        .HasColumnType("int");

                    b.Property<int>("_frozenTypeId")
                        .HasColumnName("FrozenTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("_frozenStatusId");

                    b.HasIndex("_frozenTypeId");

                    b.ToTable("frozens","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Frozens.FrozenStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("frozenstatus","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Frozens.FrozenType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("frozentype","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Transfers.InitiatedBy", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("initiatedby","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Transfers.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "transferseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("DateTransferred")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromBalanceId")
                        .HasColumnType("int");

                    b.Property<int>("ToBalanceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_initiatedById")
                        .HasColumnName("InitiatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromBalanceId");

                    b.HasIndex("ToBalanceId");

                    b.HasIndex("_initiatedById");

                    b.ToTable("transfers","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Withdrawals.Withdrawal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "withdrawalseq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "distributing")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("BalanceId")
                        .HasColumnName("BalanceId")
                        .HasColumnType("int");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(4,3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("_withdrawalStatusId")
                        .HasColumnName("WithdrawalStatus")
                        .HasColumnType("int");

                    b.Property<int>("_withdrawalTypeId")
                        .HasColumnName("WithdrawalType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("_withdrawalStatusId");

                    b.HasIndex("_withdrawalTypeId");

                    b.ToTable("withdrawals","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Withdrawals.WithdrawalStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("withdrawalstatus","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Withdrawals.WithdrawalType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("withdrawaltype","distributing");
                });

            modelBuilder.Entity("Distributing.Infrastructure.Idempotency.ClientRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("requests","distributing");
                });

            modelBuilder.Entity("Distributing.Domain.Model.Balances.Balance", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Commissions.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");

                    b.HasOne("Distributing.Domain.Model.Commissions.UserType", null)
                        .WithMany()
                        .HasForeignKey("_userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Distributing.Domain.Model.Balances.WithdrawalLimit", "WithdrawalLimit", b1 =>
                        {
                            b1.Property<int>("BalanceId")
                                .HasColumnType("int");

                            b1.Property<decimal>("DailyAmountLimit")
                                .HasColumnType("decimal(18,0)");

                            b1.Property<int>("DailyFrequencyLimit")
                                .HasColumnType("int");

                            b1.Property<decimal>("EachAmountLowerLimit")
                                .HasColumnType("decimal(18,0)");

                            b1.Property<decimal>("EachAmountUpperLimit")
                                .HasColumnType("decimal(18,0)");

                            b1.HasKey("BalanceId");

                            b1.ToTable("balances");

                            b1.WithOwner()
                                .HasForeignKey("BalanceId");
                        });
                });

            modelBuilder.Entity("Distributing.Domain.Model.Balances.BalanceWithdrawal", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany("BalanceWithdrawals")
                        .HasForeignKey("BalanceId");

                    b.HasOne("Distributing.Domain.Model.Withdrawals.Withdrawal", null)
                        .WithMany()
                        .HasForeignKey("WithdrawalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Distributing.Domain.Model.Banks.DepositAccount", b =>
                {
                    b.OwnsOne("Distributing.Domain.Model.Banks.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("DepositAccountId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AccountNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DepositAccountId");

                            b1.ToTable("depositAccounts");

                            b1.WithOwner()
                                .HasForeignKey("DepositAccountId");
                        });
                });

            modelBuilder.Entity("Distributing.Domain.Model.Commissions.Commission", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Commissions.Commission", null)
                        .WithMany()
                        .HasForeignKey("UplineCommissionId");

                    b.HasOne("Distributing.Domain.Model.Commissions.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("_userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Distributing.Domain.Model.Deposits.Deposit", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Deposits.DepositStatus", "DepositStatus")
                        .WithMany()
                        .HasForeignKey("_depositStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Deposits.DepositType", "DepositType")
                        .WithMany()
                        .HasForeignKey("_depositTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Distributing.Domain.Model.Banks.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("DepositId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AccountNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DepositId");

                            b1.ToTable("deposits");

                            b1.WithOwner()
                                .HasForeignKey("DepositId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Distributions.BalanceRecord", "BalanceRecord", b1 =>
                        {
                            b1.Property<int>("DepositId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("BalanceAfter")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("BalanceBefore")
                                .HasColumnType("decimal(18,3)");

                            b1.HasKey("DepositId");

                            b1.ToTable("deposits");

                            b1.WithOwner()
                                .HasForeignKey("DepositId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Roles.Admin", "VerifiedBy", b1 =>
                        {
                            b1.Property<int>("DepositId")
                                .HasColumnType("int");

                            b1.Property<string>("AdminId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DepositId");

                            b1.ToTable("deposits");

                            b1.WithOwner()
                                .HasForeignKey("DepositId");
                        });
                });

            modelBuilder.Entity("Distributing.Domain.Model.Distributions.Distribution", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Commissions.Commission", null)
                        .WithMany()
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Distributions.DistributionType", "DistributionType")
                        .WithMany()
                        .HasForeignKey("_distributionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Distributing.Domain.Model.Distributions.Order", "Order", b1 =>
                        {
                            b1.Property<int>("DistributionId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,0)");

                            b1.Property<decimal>("CommissionAmount")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<DateTime>("DateCreated")
                                .HasColumnType("datetime2");

                            b1.Property<string>("ShopId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ShopOrderId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TrackingNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TraderId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DistributionId");

                            b1.ToTable("distributions");

                            b1.WithOwner()
                                .HasForeignKey("DistributionId");
                        });
                });

            modelBuilder.Entity("Distributing.Domain.Model.Frozens.Frozen", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Distributing.Domain.Model.Frozens.FrozenStatus", "FrozenStatus")
                        .WithMany()
                        .HasForeignKey("_frozenStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Frozens.FrozenType", "FrozenType")
                        .WithMany()
                        .HasForeignKey("_frozenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Distributing.Domain.Model.Distributions.BalanceRecord", "BalanceFrozenRecord", b1 =>
                        {
                            b1.Property<int>("FrozenId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("BalanceAfter")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("BalanceBefore")
                                .HasColumnType("decimal(18,3)");

                            b1.HasKey("FrozenId");

                            b1.ToTable("frozens");

                            b1.WithOwner()
                                .HasForeignKey("FrozenId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Distributions.BalanceRecord", "BalanceUnfrozenRecord", b1 =>
                        {
                            b1.Property<int>("FrozenId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("BalanceAfter")
                                .HasColumnType("decimal(18,3)");

                            b1.Property<decimal>("BalanceBefore")
                                .HasColumnType("decimal(18,3)");

                            b1.HasKey("FrozenId");

                            b1.ToTable("frozens");

                            b1.WithOwner()
                                .HasForeignKey("FrozenId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Roles.Admin", "ByAdmin", b1 =>
                        {
                            b1.Property<int>("FrozenId")
                                .HasColumnType("int");

                            b1.Property<string>("AdminId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("FrozenId");

                            b1.ToTable("frozens");

                            b1.WithOwner()
                                .HasForeignKey("FrozenId");
                        });
                });

            modelBuilder.Entity("Distributing.Domain.Model.Transfers.Transfer", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany()
                        .HasForeignKey("FromBalanceId")
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany()
                        .HasForeignKey("ToBalanceId")
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Transfers.InitiatedBy", "InitiatedBy")
                        .WithMany()
                        .HasForeignKey("_initiatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Distributing.Domain.Model.Withdrawals.Withdrawal", b =>
                {
                    b.HasOne("Distributing.Domain.Model.Balances.Balance", null)
                        .WithMany()
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Withdrawals.WithdrawalStatus", "WithdrawalStatus")
                        .WithMany()
                        .HasForeignKey("_withdrawalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Distributing.Domain.Model.Withdrawals.WithdrawalType", "WithdrawalType")
                        .WithMany()
                        .HasForeignKey("_withdrawalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Distributing.Domain.Model.Banks.BankAccount", "BankAccount", b1 =>
                        {
                            b1.Property<int>("WithdrawalId")
                                .HasColumnType("int");

                            b1.Property<string>("AccountName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AccountNumber")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BankName")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WithdrawalId");

                            b1.ToTable("withdrawals");

                            b1.WithOwner()
                                .HasForeignKey("WithdrawalId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Roles.Admin", "ApprovedBy", b1 =>
                        {
                            b1.Property<int>("WithdrawalId")
                                .HasColumnType("int");

                            b1.Property<string>("AdminId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WithdrawalId");

                            b1.ToTable("withdrawals");

                            b1.WithOwner()
                                .HasForeignKey("WithdrawalId");
                        });

                    b.OwnsOne("Distributing.Domain.Model.Roles.Admin", "CancellationApprovedBy", b1 =>
                        {
                            b1.Property<int>("WithdrawalId")
                                .HasColumnType("int");

                            b1.Property<string>("AdminId")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WithdrawalId");

                            b1.ToTable("withdrawals");

                            b1.WithOwner()
                                .HasForeignKey("WithdrawalId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
